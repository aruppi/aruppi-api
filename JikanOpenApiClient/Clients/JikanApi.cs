// <auto-generated/>
using JikanRest.Anime;
using JikanRest.Characters;
using JikanRest.Clubs;
using JikanRest.Genres;
using JikanRest.Magazines;
using JikanRest.Manga;
using JikanRest.People;
using JikanRest.Producers;
using JikanRest.RandomNamespace;
using JikanRest.Recommendations;
using JikanRest.Reviews;
using JikanRest.Schedules;
using JikanRest.Seasons;
using JikanRest.Top;
using JikanRest.Users;
using JikanRest.Watch;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace JikanRest {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class JikanApi : BaseRequestBuilder {
        /// <summary>The anime property</summary>
        public AnimeRequestBuilder Anime { get =>
            new AnimeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The characters property</summary>
        public CharactersRequestBuilder Characters { get =>
            new CharactersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The clubs property</summary>
        public ClubsRequestBuilder Clubs { get =>
            new ClubsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The genres property</summary>
        public GenresRequestBuilder Genres { get =>
            new GenresRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The magazines property</summary>
        public MagazinesRequestBuilder Magazines { get =>
            new MagazinesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The manga property</summary>
        public MangaRequestBuilder Manga { get =>
            new MangaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The people property</summary>
        public PeopleRequestBuilder People { get =>
            new PeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The producers property</summary>
        public ProducersRequestBuilder Producers { get =>
            new ProducersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The random property</summary>
        public RandomRequestBuilder Random { get =>
            new RandomRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recommendations property</summary>
        public RecommendationsRequestBuilder Recommendations { get =>
            new RecommendationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The reviews property</summary>
        public ReviewsRequestBuilder Reviews { get =>
            new ReviewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schedules property</summary>
        public SchedulesRequestBuilder Schedules { get =>
            new SchedulesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The seasons property</summary>
        public SeasonsRequestBuilder Seasons { get =>
            new SeasonsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The top property</summary>
        public TopRequestBuilder Top { get =>
            new TopRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users { get =>
            new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watch property</summary>
        public WatchRequestBuilder Watch { get =>
            new WatchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new JikanApi and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JikanApi(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "https://api.jikan.moe/v4";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
