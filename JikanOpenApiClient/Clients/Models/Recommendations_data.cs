// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    public class Recommendations_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Recommendation context provided by the user</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Content { get; set; }
#nullable restore
#else
        public string Content { get; set; }
#endif
        /// <summary>Array of 2 entries that are being recommended to each other</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Recommendations_data_entry>? Entry { get; set; }
#nullable restore
#else
        public List<Recommendations_data_entry> Entry { get; set; }
#endif
        /// <summary>MAL IDs of recommendations is both of the MAL ID&apos;s with a `-` delimiter</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MalId { get; set; }
#nullable restore
#else
        public string MalId { get; set; }
#endif
        /// <summary>User Meta By ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User_by_id? User { get; set; }
#nullable restore
#else
        public User_by_id User { get; set; }
#endif
        /// <summary>
        /// Instantiates a new recommendations_data and sets the default values.
        /// </summary>
        public Recommendations_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Recommendations_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Recommendations_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"content", n => { Content = n.GetStringValue(); } },
                {"entry", n => { Entry = n.GetCollectionOfObjectValues<Recommendations_data_entry>(Recommendations_data_entry.CreateFromDiscriminatorValue)?.ToList(); } },
                {"mal_id", n => { MalId = n.GetStringValue(); } },
                {"user", n => { User = n.GetObjectValue<User_by_id>(User_by_id.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("content", Content);
            writer.WriteCollectionOfObjectValues<Recommendations_data_entry>("entry", Entry);
            writer.WriteStringValue("mal_id", MalId);
            writer.WriteObjectValue<User_by_id>("user", User);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes anime_meta, manga_meta
        /// </summary>
        public class Recommendations_data_entry : IComposedTypeWrapper, IParsable {
            /// <summary>Composed type representation for type anime_meta</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Anime_meta? AnimeMeta { get; set; }
#nullable restore
#else
            public Anime_meta AnimeMeta { get; set; }
#endif
            /// <summary>Composed type representation for type manga_meta</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Manga_meta? MangaMeta { get; set; }
#nullable restore
#else
            public Manga_meta MangaMeta { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static Recommendations_data_entry CreateFromDiscriminatorValue(IParseNode parseNode) {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new Recommendations_data_entry();
                result.AnimeMeta = new Anime_meta();
                result.MangaMeta = new Manga_meta();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
                if(AnimeMeta != null || MangaMeta != null) {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(AnimeMeta, MangaMeta);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer) {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<Anime_meta>(null, AnimeMeta, MangaMeta);
            }
        }
    }
}
