// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    /// <summary>
    /// Anime Statistics
    /// </summary>
    public class User_statistics_data_anime : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Anime Completed</summary>
        public int? Completed { get; set; }
        /// <summary>Number of days spent watching Anime</summary>
        public float? DaysWatched { get; set; }
        /// <summary>Anime Dropped</summary>
        public int? Dropped { get; set; }
        /// <summary>Number of Anime Episodes Watched</summary>
        public int? EpisodesWatched { get; set; }
        /// <summary>Mean Score</summary>
        public float? MeanScore { get; set; }
        /// <summary>Anime On-Hold</summary>
        public int? OnHold { get; set; }
        /// <summary>Anime Planned to Watch</summary>
        public int? PlanToWatch { get; set; }
        /// <summary>Anime re-watched</summary>
        public int? Rewatched { get; set; }
        /// <summary>Total Anime entries on User list</summary>
        public int? TotalEntries { get; set; }
        /// <summary>Anime Watching</summary>
        public int? Watching { get; set; }
        /// <summary>
        /// Instantiates a new user_statistics_data_anime and sets the default values.
        /// </summary>
        public User_statistics_data_anime() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static User_statistics_data_anime CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new User_statistics_data_anime();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"completed", n => { Completed = n.GetIntValue(); } },
                {"days_watched", n => { DaysWatched = n.GetFloatValue(); } },
                {"dropped", n => { Dropped = n.GetIntValue(); } },
                {"episodes_watched", n => { EpisodesWatched = n.GetIntValue(); } },
                {"mean_score", n => { MeanScore = n.GetFloatValue(); } },
                {"on_hold", n => { OnHold = n.GetIntValue(); } },
                {"plan_to_watch", n => { PlanToWatch = n.GetIntValue(); } },
                {"rewatched", n => { Rewatched = n.GetIntValue(); } },
                {"total_entries", n => { TotalEntries = n.GetIntValue(); } },
                {"watching", n => { Watching = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("completed", Completed);
            writer.WriteFloatValue("days_watched", DaysWatched);
            writer.WriteIntValue("dropped", Dropped);
            writer.WriteIntValue("episodes_watched", EpisodesWatched);
            writer.WriteFloatValue("mean_score", MeanScore);
            writer.WriteIntValue("on_hold", OnHold);
            writer.WriteIntValue("plan_to_watch", PlanToWatch);
            writer.WriteIntValue("rewatched", Rewatched);
            writer.WriteIntValue("total_entries", TotalEntries);
            writer.WriteIntValue("watching", Watching);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
