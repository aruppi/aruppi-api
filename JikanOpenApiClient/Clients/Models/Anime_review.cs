// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    public class Anime_review : Manga, IParsable {
        /// <summary>Review created date ISO8601</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>Number of episodes watched</summary>
        public int? EpisodesWatched { get; set; }
        /// <summary>The review was made before the entry was completed</summary>
        public bool? IsPreliminary { get; set; }
        /// <summary>The review contains spoiler</summary>
        public bool? IsSpoiler { get; set; }
        /// <summary>User reaction count on the review</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Anime_review_reactions? Reactions { get; set; }
#nullable restore
#else
        public Anime_review_reactions Reactions { get; set; }
#endif
        /// <summary>Review content</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Review { get; set; }
#nullable restore
#else
        public string Review { get; set; }
#endif
        /// <summary>Review tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Anime_review CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Anime_review();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"date", n => { Date = n.GetStringValue(); } },
                {"episodes_watched", n => { EpisodesWatched = n.GetIntValue(); } },
                {"is_preliminary", n => { IsPreliminary = n.GetBoolValue(); } },
                {"is_spoiler", n => { IsSpoiler = n.GetBoolValue(); } },
                {"reactions", n => { Reactions = n.GetObjectValue<Anime_review_reactions>(Anime_review_reactions.CreateFromDiscriminatorValue); } },
                {"review", n => { Review = n.GetStringValue(); } },
                {"tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("date", Date);
            writer.WriteIntValue("episodes_watched", EpisodesWatched);
            writer.WriteBoolValue("is_preliminary", IsPreliminary);
            writer.WriteBoolValue("is_spoiler", IsSpoiler);
            writer.WriteObjectValue<Anime_review_reactions>("reactions", Reactions);
            writer.WriteStringValue("review", Review);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
        }
    }
}
