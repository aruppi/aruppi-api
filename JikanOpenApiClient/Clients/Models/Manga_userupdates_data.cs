// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    public class Manga_userupdates_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of chapters read</summary>
        public int? ChaptersRead { get; set; }
        /// <summary>Total number of chapters</summary>
        public int? ChaptersTotal { get; set; }
        /// <summary>Last updated date ISO8601</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>User Score</summary>
        public int? Score { get; set; }
        /// <summary>User list status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The user property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User_meta? User { get; set; }
#nullable restore
#else
        public User_meta User { get; set; }
#endif
        /// <summary>Number of volumes read</summary>
        public int? VolumesRead { get; set; }
        /// <summary>Total number of volumes</summary>
        public int? VolumesTotal { get; set; }
        /// <summary>
        /// Instantiates a new manga_userupdates_data and sets the default values.
        /// </summary>
        public Manga_userupdates_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Manga_userupdates_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Manga_userupdates_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"chapters_read", n => { ChaptersRead = n.GetIntValue(); } },
                {"chapters_total", n => { ChaptersTotal = n.GetIntValue(); } },
                {"date", n => { Date = n.GetStringValue(); } },
                {"score", n => { Score = n.GetIntValue(); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"user", n => { User = n.GetObjectValue<User_meta>(User_meta.CreateFromDiscriminatorValue); } },
                {"volumes_read", n => { VolumesRead = n.GetIntValue(); } },
                {"volumes_total", n => { VolumesTotal = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("chapters_read", ChaptersRead);
            writer.WriteIntValue("chapters_total", ChaptersTotal);
            writer.WriteStringValue("date", Date);
            writer.WriteIntValue("score", Score);
            writer.WriteStringValue("status", Status);
            writer.WriteObjectValue<User_meta>("user", User);
            writer.WriteIntValue("volumes_read", VolumesRead);
            writer.WriteIntValue("volumes_total", VolumesTotal);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
