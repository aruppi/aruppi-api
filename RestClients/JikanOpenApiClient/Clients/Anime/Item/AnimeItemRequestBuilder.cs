// <auto-generated/>
using JikanRest.Anime.Item.Characters;
using JikanRest.Anime.Item.Episodes;
using JikanRest.Anime.Item.External;
using JikanRest.Anime.Item.Forum;
using JikanRest.Anime.Item.Full;
using JikanRest.Anime.Item.Moreinfo;
using JikanRest.Anime.Item.News;
using JikanRest.Anime.Item.Pictures;
using JikanRest.Anime.Item.Recommendations;
using JikanRest.Anime.Item.Relations;
using JikanRest.Anime.Item.Reviews;
using JikanRest.Anime.Item.Staff;
using JikanRest.Anime.Item.Statistics;
using JikanRest.Anime.Item.Streaming;
using JikanRest.Anime.Item.Themes;
using JikanRest.Anime.Item.Userupdates;
using JikanRest.Anime.Item.Videos;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace JikanRest.Anime.Item {
    /// <summary>
    /// Builds and executes requests for operations under \anime\{id}
    /// </summary>
    public class AnimeItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The characters property</summary>
        public CharactersRequestBuilder Characters { get =>
            new CharactersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The episodes property</summary>
        public EpisodesRequestBuilder Episodes { get =>
            new EpisodesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The external property</summary>
        public ExternalRequestBuilder External { get =>
            new ExternalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The forum property</summary>
        public ForumRequestBuilder Forum { get =>
            new ForumRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The full property</summary>
        public FullRequestBuilder Full { get =>
            new FullRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The moreinfo property</summary>
        public MoreinfoRequestBuilder Moreinfo { get =>
            new MoreinfoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The news property</summary>
        public NewsRequestBuilder News { get =>
            new NewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pictures property</summary>
        public PicturesRequestBuilder Pictures { get =>
            new PicturesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recommendations property</summary>
        public RecommendationsRequestBuilder Recommendations { get =>
            new RecommendationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The relations property</summary>
        public RelationsRequestBuilder Relations { get =>
            new RelationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The reviews property</summary>
        public ReviewsRequestBuilder Reviews { get =>
            new ReviewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The staff property</summary>
        public StaffRequestBuilder Staff { get =>
            new StaffRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statistics property</summary>
        public StatisticsRequestBuilder Statistics { get =>
            new StatisticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The streaming property</summary>
        public StreamingRequestBuilder Streaming { get =>
            new StreamingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The themes property</summary>
        public ThemesRequestBuilder Themes { get =>
            new ThemesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The userupdates property</summary>
        public UserupdatesRequestBuilder Userupdates { get =>
            new UserupdatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The videos property</summary>
        public VideosRequestBuilder Videos { get =>
            new VideosRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new AnimeItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AnimeItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/anime/{id}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new AnimeItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AnimeItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/anime/{id}", rawUrl) {
        }
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AnimeGetResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<AnimeGetResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<AnimeGetResponse>(requestInfo, AnimeGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AnimeItemRequestBuilder WithUrl(string rawUrl) {
            return new AnimeItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
