// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    public class Manga_statistics_data_scores : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Percentage of votes for this score</summary>
        public float? Percentage { get; set; }
        /// <summary>Scoring value</summary>
        public int? Score { get; set; }
        /// <summary>Number of votes for this score</summary>
        public int? Votes { get; set; }
        /// <summary>
        /// Instantiates a new manga_statistics_data_scores and sets the default values.
        /// </summary>
        public Manga_statistics_data_scores() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Manga_statistics_data_scores CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Manga_statistics_data_scores();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"percentage", n => { Percentage = n.GetFloatValue(); } },
                {"score", n => { Score = n.GetIntValue(); } },
                {"votes", n => { Votes = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("percentage", Percentage);
            writer.WriteIntValue("score", Score);
            writer.WriteIntValue("votes", Votes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
