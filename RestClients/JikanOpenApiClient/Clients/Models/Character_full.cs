// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    /// <summary>
    /// Character Resource
    /// </summary>
    public class Character_full : IAdditionalDataHolder, IParsable {
        /// <summary>Biography</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? About { get; set; }
#nullable restore
#else
        public string About { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The anime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Character_full_anime>? Anime { get; set; }
#nullable restore
#else
        public List<Character_full_anime> Anime { get; set; }
#endif
        /// <summary>Number of users who have favorited this entry</summary>
        public int? Favorites { get; set; }
        /// <summary>The images property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Character_images? Images { get; set; }
#nullable restore
#else
        public Character_images Images { get; set; }
#endif
        /// <summary>MyAnimeList ID</summary>
        public int? MalId { get; set; }
        /// <summary>The manga property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Character_full_manga>? Manga { get; set; }
#nullable restore
#else
        public List<Character_full_manga> Manga { get; set; }
#endif
        /// <summary>Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameKanji { get; set; }
#nullable restore
#else
        public string NameKanji { get; set; }
#endif
        /// <summary>Other Names</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Nicknames { get; set; }
#nullable restore
#else
        public List<string> Nicknames { get; set; }
#endif
        /// <summary>MyAnimeList URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The voices property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Character_full_voices>? Voices { get; set; }
#nullable restore
#else
        public List<Character_full_voices> Voices { get; set; }
#endif
        /// <summary>
        /// Instantiates a new character_full and sets the default values.
        /// </summary>
        public Character_full() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Character_full CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Character_full();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"about", n => { About = n.GetStringValue(); } },
                {"anime", n => { Anime = n.GetCollectionOfObjectValues<Character_full_anime>(Character_full_anime.CreateFromDiscriminatorValue)?.ToList(); } },
                {"favorites", n => { Favorites = n.GetIntValue(); } },
                {"images", n => { Images = n.GetObjectValue<Character_images>(Character_images.CreateFromDiscriminatorValue); } },
                {"mal_id", n => { MalId = n.GetIntValue(); } },
                {"manga", n => { Manga = n.GetCollectionOfObjectValues<Character_full_manga>(Character_full_manga.CreateFromDiscriminatorValue)?.ToList(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"name_kanji", n => { NameKanji = n.GetStringValue(); } },
                {"nicknames", n => { Nicknames = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"url", n => { Url = n.GetStringValue(); } },
                {"voices", n => { Voices = n.GetCollectionOfObjectValues<Character_full_voices>(Character_full_voices.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("about", About);
            writer.WriteCollectionOfObjectValues<Character_full_anime>("anime", Anime);
            writer.WriteIntValue("favorites", Favorites);
            writer.WriteObjectValue<Character_images>("images", Images);
            writer.WriteIntValue("mal_id", MalId);
            writer.WriteCollectionOfObjectValues<Character_full_manga>("manga", Manga);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("name_kanji", NameKanji);
            writer.WriteCollectionOfPrimitiveValues<string>("nicknames", Nicknames);
            writer.WriteStringValue("url", Url);
            writer.WriteCollectionOfObjectValues<Character_full_voices>("voices", Voices);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
