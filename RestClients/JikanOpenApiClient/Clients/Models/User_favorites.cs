// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    public class User_favorites : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Favorite Anime</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Anime_meta>? Anime { get; set; }
#nullable restore
#else
        public List<Anime_meta> Anime { get; set; }
#endif
        /// <summary>Favorite Characters</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<User_favorites_characters>? Characters { get; set; }
#nullable restore
#else
        public List<User_favorites_characters> Characters { get; set; }
#endif
        /// <summary>Favorite Manga</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Manga_meta>? Manga { get; set; }
#nullable restore
#else
        public List<Manga_meta> Manga { get; set; }
#endif
        /// <summary>Favorite People</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Character_meta>? People { get; set; }
#nullable restore
#else
        public List<Character_meta> People { get; set; }
#endif
        /// <summary>
        /// Instantiates a new user_favorites and sets the default values.
        /// </summary>
        public User_favorites() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static User_favorites CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new User_favorites();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"anime", n => { Anime = n.GetCollectionOfObjectValues<Anime_meta>(Anime_meta.CreateFromDiscriminatorValue)?.ToList(); } },
                {"characters", n => { Characters = n.GetCollectionOfObjectValues<User_favorites_characters>(User_favorites_characters.CreateFromDiscriminatorValue)?.ToList(); } },
                {"manga", n => { Manga = n.GetCollectionOfObjectValues<Manga_meta>(Manga_meta.CreateFromDiscriminatorValue)?.ToList(); } },
                {"people", n => { People = n.GetCollectionOfObjectValues<Character_meta>(Character_meta.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Anime_meta>("anime", Anime);
            writer.WriteCollectionOfObjectValues<User_favorites_characters>("characters", Characters);
            writer.WriteCollectionOfObjectValues<Manga_meta>("manga", Manga);
            writer.WriteCollectionOfObjectValues<Character_meta>("people", People);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
