// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace JikanRest.Models {
    /// <summary>
    /// Manga Statistics
    /// </summary>
    public class User_statistics_data_manga : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of Manga Chapters Read</summary>
        public int? ChaptersRead { get; set; }
        /// <summary>Manga Completed</summary>
        public int? Completed { get; set; }
        /// <summary>Number of days spent reading Manga</summary>
        public float? DaysRead { get; set; }
        /// <summary>Manga Dropped</summary>
        public int? Dropped { get; set; }
        /// <summary>Mean Score</summary>
        public float? MeanScore { get; set; }
        /// <summary>Manga On-Hold</summary>
        public int? OnHold { get; set; }
        /// <summary>Manga Planned to Read</summary>
        public int? PlanToRead { get; set; }
        /// <summary>Manga Reading</summary>
        public int? Reading { get; set; }
        /// <summary>Manga re-read</summary>
        public int? Reread { get; set; }
        /// <summary>Total Manga entries on User list</summary>
        public int? TotalEntries { get; set; }
        /// <summary>Number of Manga Volumes Read</summary>
        public int? VolumesRead { get; set; }
        /// <summary>
        /// Instantiates a new user_statistics_data_manga and sets the default values.
        /// </summary>
        public User_statistics_data_manga() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static User_statistics_data_manga CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new User_statistics_data_manga();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"chapters_read", n => { ChaptersRead = n.GetIntValue(); } },
                {"completed", n => { Completed = n.GetIntValue(); } },
                {"days_read", n => { DaysRead = n.GetFloatValue(); } },
                {"dropped", n => { Dropped = n.GetIntValue(); } },
                {"mean_score", n => { MeanScore = n.GetFloatValue(); } },
                {"on_hold", n => { OnHold = n.GetIntValue(); } },
                {"plan_to_read", n => { PlanToRead = n.GetIntValue(); } },
                {"reading", n => { Reading = n.GetIntValue(); } },
                {"reread", n => { Reread = n.GetIntValue(); } },
                {"total_entries", n => { TotalEntries = n.GetIntValue(); } },
                {"volumes_read", n => { VolumesRead = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("chapters_read", ChaptersRead);
            writer.WriteIntValue("completed", Completed);
            writer.WriteFloatValue("days_read", DaysRead);
            writer.WriteIntValue("dropped", Dropped);
            writer.WriteFloatValue("mean_score", MeanScore);
            writer.WriteIntValue("on_hold", OnHold);
            writer.WriteIntValue("plan_to_read", PlanToRead);
            writer.WriteIntValue("reading", Reading);
            writer.WriteIntValue("reread", Reread);
            writer.WriteIntValue("total_entries", TotalEntries);
            writer.WriteIntValue("volumes_read", VolumesRead);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
