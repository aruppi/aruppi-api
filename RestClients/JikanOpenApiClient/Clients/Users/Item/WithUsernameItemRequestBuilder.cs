// <auto-generated/>
using JikanRest.Users.Item.About;
using JikanRest.Users.Item.Animelist;
using JikanRest.Users.Item.Clubs;
using JikanRest.Users.Item.External;
using JikanRest.Users.Item.Favorites;
using JikanRest.Users.Item.Friends;
using JikanRest.Users.Item.Full;
using JikanRest.Users.Item.History;
using JikanRest.Users.Item.Mangalist;
using JikanRest.Users.Item.Recommendations;
using JikanRest.Users.Item.Reviews;
using JikanRest.Users.Item.Statistics;
using JikanRest.Users.Item.Userupdates;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace JikanRest.Users.Item {
    /// <summary>
    /// Builds and executes requests for operations under \users\{username}
    /// </summary>
    public class WithUsernameItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The about property</summary>
        public AboutRequestBuilder About { get =>
            new AboutRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The animelist property</summary>
        public AnimelistRequestBuilder Animelist { get =>
            new AnimelistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The clubs property</summary>
        public ClubsRequestBuilder Clubs { get =>
            new ClubsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The external property</summary>
        public ExternalRequestBuilder External { get =>
            new ExternalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The favorites property</summary>
        public FavoritesRequestBuilder Favorites { get =>
            new FavoritesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The friends property</summary>
        public FriendsRequestBuilder Friends { get =>
            new FriendsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The full property</summary>
        public FullRequestBuilder Full { get =>
            new FullRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The history property</summary>
        public HistoryRequestBuilder History { get =>
            new HistoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mangalist property</summary>
        public MangalistRequestBuilder Mangalist { get =>
            new MangalistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recommendations property</summary>
        public RecommendationsRequestBuilder Recommendations { get =>
            new RecommendationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The reviews property</summary>
        public ReviewsRequestBuilder Reviews { get =>
            new ReviewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statistics property</summary>
        public StatisticsRequestBuilder Statistics { get =>
            new StatisticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The userupdates property</summary>
        public UserupdatesRequestBuilder Userupdates { get =>
            new UserupdatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new WithUsernameItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithUsernameItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/users/{username}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithUsernameItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithUsernameItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/users/{username}", rawUrl) {
        }
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WithUsernameGetResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WithUsernameGetResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<WithUsernameGetResponse>(requestInfo, WithUsernameGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithUsernameItemRequestBuilder WithUrl(string rawUrl) {
            return new WithUsernameItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
